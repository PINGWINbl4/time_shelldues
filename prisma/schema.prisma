generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id     String   @id @unique
  name   String
  Metric Metric[]
}

model City {
  id              String            @id @unique
  name            String            @db.VarChar(99)
  UTC             Int               @default(5) @db.SmallInt
  StationSettings StationSettings[]
  User            User[]
}

model Contract {
  id      String    @id @unique
  number  String    @db.VarChar(255)
  userId  String
  User    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Station Station[]
}

model Data {
  id        String     @id @unique
  value     Json
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  sensorId  String
  Sensor    Sensor     @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  EventLog  EventLog[]
}

model DefaultScripts {
  id          String     @id @unique
  deviceId    String
  script      Json
  description String?
  DeviceType  DeviceType @relation(fields: [deviceId], references: [id])
}

model DeviceGroup {
  id                 String               @id @unique
  name               String
  iconId             String?
  Icon               Icon?                @relation(fields: [iconId], references: [id])
  DeviceTypesAtGroup DeviceTypesAtGroup[]
}

model DeviceType {
  id                 String               @id @unique
  name               String               @db.VarChar(255)
  code               String?              @unique
  iconId             String?
  DefaultScripts     DefaultScripts[]
  Icon               Icon?                @relation(fields: [iconId], references: [id])
  DeviceTypesAtGroup DeviceTypesAtGroup[]
  Sensor             Sensor[]
  Station            Station[]
  Version            Version[]
}

model DeviceTypesAtGroup {
  groupId     String
  deviceId    String
  DeviceType  DeviceType  @relation(fields: [deviceId], references: [id])
  DeviceGroup DeviceGroup @relation(fields: [groupId], references: [id])

  @@id([groupId, deviceId])
}

model EventCode {
  id          String     @id @unique
  description String
  code        Int        @unique
  EventLog    EventLog[]
}

model EventLog {
  id        String    @id @unique
  userId    String
  sensorId  String?
  stationId String?
  dataId    String?
  codeId    String
  EventCode EventCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  Data      Data?     @relation(fields: [dataId], references: [id], onDelete: Cascade)
  Sensor    Sensor?   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  Station   Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Icon {
  id             String           @id @unique
  name           String
  url            String
  DeviceGroup    DeviceGroup[]
  DeviceType     DeviceType[]
  SensorSettings SensorSettings[]
}

model Metric {
  id         String   @id @unique
  datetime   DateTime @default(now())
  activityId String
  userId     String
  Activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushMessage {
  id        String @id @unique
  title     String
  body      String
  condition String
  code      Int    @unique
}

model RefreshToken {
  id          String   @id @unique
  hashedToken String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rooms {
  id              String            @id @unique
  name            String            @db.VarChar(255)
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  SensorSettings  SensorSettings[]
  StationSettings StationSettings[]
}

model Sensor {
  id             String          @id @unique
  mac            String          @db.VarChar(99)
  elementId      String?         @db.VarChar(99)
  charge         Int?
  uptime         BigInt?
  deviceId       String
  stationId      String
  Data           Data[]
  EventLog       EventLog[]
  DeviceType     DeviceType      @relation(fields: [deviceId], references: [id])
  Station        Station         @relation(fields: [stationId], references: [id], onDelete: Cascade)
  SensorSettings SensorSettings?
}

model SensorSettings {
  id         String    @id @unique
  name       String    @db.VarChar(255)
  sleep      BigInt?   @default(10)
  alert      Boolean   @default(false)
  lost       Boolean   @default(false)
  triggerMin Float?
  triggerMax Float?
  schedule   Json?
  options    Json?
  pushStart  DateTime? @db.Time(6)
  pushEnd    DateTime? @db.Time(6)
  sensorId   String    @unique
  versionId  String
  roomsId    String?
  iconId     String?
  Icon       Icon?     @relation(fields: [iconId], references: [id])
  Rooms      Rooms?    @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  Sensor     Sensor    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  Version    Version   @relation(fields: [versionId], references: [id])
}

model Shelldue {
  id                  String                @id @unique
  active              Boolean
  name                String
  hash                String?
  shelldueScript      Json
  deviceTypes         String[]
  userId              String
  executing           Boolean               @default(false)
  shelldueType        ShelldueType          @default(condition)
  runtimeEnd          DateTime?             @db.Time(6)
  runtimeStart        DateTime?             @db.Time(6)
  User                User                  @relation(fields: [userId], references: [id])
  ShellduesOnStations ShellduesOnStations[]
}

model ShellduesOnStations {
  id         String   @id @unique
  shelldueId String
  stationId  String
  Shelldue   Shelldue @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
  Station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

model Station {
  id                  String                @id @unique
  mac                 String?               @db.VarChar(99)
  gatewayId           String?               @db.VarChar(99)
  deviceId            String
  contractId          String?
  userId              String
  EventLog            EventLog[]
  Sensor              Sensor[]
  ShellduesOnStations ShellduesOnStations[]
  Contract            Contract?             @relation(fields: [contractId], references: [id])
  DeviceType          DeviceType            @relation(fields: [deviceId], references: [id])
  User                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  StationSettings     StationSettings?
}

model StationSettings {
  id        String  @id @unique
  name      String  @db.VarChar(255)
  options   Json?
  stationId String  @unique
  versionId String
  cityId    String?
  roomsId   String?
  City      City?   @relation(fields: [cityId], references: [id])
  Rooms     Rooms?  @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  Station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  Version   Version @relation(fields: [versionId], references: [id])
}

model User {
  id               String             @id @unique
  name             String             @db.VarChar(255)
  surname          String             @db.VarChar(255)
  patronymic       String             @db.VarChar(255)
  email            String             @unique
  phone            BigInt
  password         String
  verified         Boolean            @default(false)
  status           UserStatus
  client           UserClient
  role             UserRole
  auto_updating    Boolean            @default(true)
  auto_paying      Boolean            @default(true)
  get_push         Boolean            @default(true)
  get_email        Boolean            @default(true)
  hash_rst         String?            @db.VarChar(255)
  hash_vrf         String?            @db.VarChar(255)
  remainingTries   Int                @default(0)
  token            String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  cityId           String
  Contract         Contract[]
  EventLog         EventLog[]
  Metric           Metric[]
  RefreshToken     RefreshToken[]
  Rooms            Rooms[]
  Shelldue         Shelldue[]
  Station          Station[]
  City             City               @relation(fields: [cityId], references: [id])
  UserToUserGroups UserToUserGroups[]
}

model UserGroups {
  id               String             @id @unique
  name             String
  UserToUserGroups UserToUserGroups[]
}

model UserToUserGroups {
  userGroupId String
  userId      String
  UserGroups  UserGroups @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  User        User       @relation(fields: [userId], references: [id])

  @@id([userGroupId, userId])
}

model Version {
  id              String            @id @unique
  fileUrl         String
  description     String
  version         String            @db.VarChar(255)
  servFileUrl     String            @default("")
  deviceId        String
  createdAt       DateTime          @default(now())
  SensorSettings  SensorSettings[]
  StationSettings StationSettings[]
  DeviceType      DeviceType        @relation(fields: [deviceId], references: [id])
}

enum ShelldueType {
  time
  condition
  tip
}

enum UserClient {
  bussiness
  person
  local
}

enum UserRole {
  administrator
  developer
  manager
  support
  user
}

enum UserStatus {
  active
  inactive
}
