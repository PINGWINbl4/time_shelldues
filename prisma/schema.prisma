generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id     String   @id @unique
  name   String
  Metric Metric[]
}

model City {
  id              String            @id @unique
  name            String            @db.VarChar(99)
  UTC             Int               @default(5) @db.SmallInt
  lat             Float?
  lon             Float?
  Houses          Houses[]
  StationSettings StationSettings[]
  User            User[]
  Weather         Weather[]
}

model Contract {
  id      String    @id @unique
  number  String    @db.VarChar(255)
  userId  String
  User    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Station Station[]
}

model Data {
  id            String     @id @unique
  value         Json
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  sensorId      String
  createdAtDate DateTime   @default(now()) @db.Date
  Sensor        Sensor     @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  EventLog      EventLog[]
}

model DefaultScripts {
  id                          String                        @id @unique
  script                      Json
  description                 String?
  name                        String?
  DeviceTypesAtDefaultScripts DeviceTypesAtDefaultScripts[]
}

model DeviceGroup {
  id                 String               @id @unique
  name               String
  iconId             String?
  Icon               Icon?                @relation(fields: [iconId], references: [id])
  DeviceTypesAtGroup DeviceTypesAtGroup[]
}

model DeviceType {
  id                          String                        @id @unique
  name                        String                        @db.VarChar(255)
  code                        String?                       @unique
  iconId                      String?
  category                    deviceCategory?
  frontView                   Json?
  commands                    Json?
  majorFields                 String[]
  fieldsToLog                 Json?
  firstName                   String                        @default("Новый датчик")
  sleepTime                   Int?                          @default(15)
  Icon                        Icon?                         @relation(fields: [iconId], references: [id])
  DeviceTypesAtDefaultScripts DeviceTypesAtDefaultScripts[]
  DeviceTypesAtGroup          DeviceTypesAtGroup[]
  Sensor                      Sensor[]
  Station                     Station[]
  Version                     Version[]
}

model DeviceTypesAtGroup {
  groupId     String
  deviceId    String
  DeviceType  DeviceType  @relation(fields: [deviceId], references: [id])
  DeviceGroup DeviceGroup @relation(fields: [groupId], references: [id])

  @@id([groupId, deviceId])
}

model EventCode {
  id          String     @id @unique
  description String
  code        Int        @unique
  EventLog    EventLog[]
}

model EventLog {
  id         String    @id @unique @default(uuid())
  userId     String
  sensorId   String?
  stationId  String?
  dataId     String?
  codeId     String
  shelldueId String?
  createdAt  DateTime  @default(now())
  message    String?   @db.VarChar(4096)
  visible    Boolean?  @default(true)
  EventCode  EventCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  Data       Data?     @relation(fields: [dataId], references: [id], onDelete: Cascade)
  Sensor     Sensor?   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  Shelldue   Shelldue? @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
  Station    Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Icon {
  id             String           @id @unique
  name           String
  url            String
  userId         String?
  DeviceGroup    DeviceGroup[]
  DeviceType     DeviceType[]
  User           User?            @relation(fields: [userId], references: [id])
  SensorSettings SensorSettings[]
}

model Metric {
  id         String   @id @unique
  datetime   DateTime @default(now())
  activityId String
  userId     String
  Activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushMessage {
  id        String @id @unique
  title     String
  body      String
  condition String
  code      Int    @unique
}

model RefreshToken {
  id          String   @id @unique
  hashedToken String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rooms {
  id              String            @id @unique
  name            String            @db.VarChar(255)
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  housesId        String?
  Houses          Houses?           @relation(fields: [housesId], references: [id], onDelete: Cascade)
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  SensorSettings  SensorSettings[]
  StationSettings StationSettings[]
}

model Sensor {
  id             String          @id @unique
  mac            String          @db.VarChar(99)
  elementId      String?         @db.VarChar(99)
  charge         Int?
  uptime         BigInt?
  deviceId       String
  stationId      String
  linkquality    Int             @default(0)
  deleted        Boolean         @default(false)
  online         Boolean         @default(true)
  statusDate     DateTime        @default(now())
  Data           Data[]
  EventLog       EventLog[]
  DeviceType     DeviceType      @relation(fields: [deviceId], references: [id])
  Station        Station         @relation(fields: [stationId], references: [id], onDelete: Cascade)
  SensorSettings SensorSettings?
}

model SensorSettings {
  id         String    @id @unique
  name       String    @db.VarChar(255)
  sleep      BigInt?   @default(10)
  alert      Boolean   @default(false)
  lost       Boolean   @default(false)
  triggerMin Float?
  triggerMax Float?
  schedule   Json?
  options    Json?
  pushStart  DateTime? @db.Time(6)
  pushEnd    DateTime? @db.Time(6)
  sensorId   String    @unique
  versionId  String
  roomsId    String?
  iconId     String?
  sendLogs   Boolean   @default(true)
  sendPushes Boolean   @default(true)
  Icon       Icon?     @relation(fields: [iconId], references: [id])
  Rooms      Rooms?    @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  Sensor     Sensor    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  Version    Version   @relation(fields: [versionId], references: [id])
}

model Shelldue {
  id                  String                @id @unique
  active              Boolean
  name                String
  hash                String?
  shelldueScript      Json
  deviceTypes         String[]
  userId              String
  executing           Boolean               @default(false)
  shelldueType        ShelldueType          @default(condition)
  runtimeEnd          DateTime?             @db.Time(6)
  runtimeStart        DateTime?             @db.Time(6)
  success             Boolean[]
  lastSuccess         Boolean[]
  duration            BigInt?
  stage               Int                   @default(0)
  activeDays          Int[]
  EventLog            EventLog[]
  User                User                  @relation(fields: [userId], references: [id])
  ShellduesChainLink  ShellduesChainLink[]
  ShellduesOnStations ShellduesOnStations[]
}

model ShellduesOnStations {
  id         String   @id @unique
  shelldueId String
  stationId  String
  Shelldue   Shelldue @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
  Station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

model Station {
  id                  String                @id @unique
  mac                 String?               @db.VarChar(99)
  gatewayId           String?               @db.VarChar(99)
  deviceId            String
  contractId          String?
  userId              String
  EventLog            EventLog[]
  Sensor              Sensor[]
  ShellduesOnStations ShellduesOnStations[]
  Contract            Contract?             @relation(fields: [contractId], references: [id])
  DeviceType          DeviceType            @relation(fields: [deviceId], references: [id])
  User                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  StationSettings     StationSettings?
}

model StationSettings {
  id        String  @id @unique
  name      String  @db.VarChar(255)
  options   Json?
  stationId String  @unique
  versionId String
  cityId    String?
  roomsId   String?
  City      City?   @relation(fields: [cityId], references: [id])
  Rooms     Rooms?  @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  Station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  Version   Version @relation(fields: [versionId], references: [id])
}

model User {
  id                  String             @id @unique
  name                String             @db.VarChar(255)
  surname             String             @db.VarChar(255)
  patronymic          String             @db.VarChar(255)
  email               String             @unique
  phone               BigInt
  password            String
  verified            Boolean            @default(false)
  status              UserStatus
  client              UserClient
  role                UserRole
  auto_updating       Boolean            @default(true)
  auto_paying         Boolean            @default(true)
  get_push            Boolean            @default(true)
  get_email           Boolean            @default(true)
  hash_rst            String?            @db.VarChar(255)
  hash_vrf            String?            @db.VarChar(255)
  remainingTries      Int                @default(0)
  token               String[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime
  cityId              String
  permissionsIssued   Json?
  permissionsReceived Json?
  Contract            Contract[]
  EventLog            EventLog[]
  FeedbackReqorts     FeedbackReqorts[]
  Icon                Icon[]
  Metric              Metric[]
  RefreshToken        RefreshToken[]
  Rooms               Rooms[]
  Shelldue            Shelldue[]
  Station             Station[]
  City                City               @relation(fields: [cityId], references: [id])
  UserToUserGroups    UserToUserGroups[]
  UsersAtHouses       UsersAtHouses[]
}

model UserGroups {
  id               String             @id @unique
  name             String
  UserToUserGroups UserToUserGroups[]
}

model UserToUserGroups {
  userGroupId String
  userId      String
  UserGroups  UserGroups @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  User        User       @relation(fields: [userId], references: [id])

  @@id([userGroupId, userId])
}

model Version {
  id              String            @id @unique
  fileUrl         String
  description     String
  version         String            @db.VarChar(255)
  servFileUrl     String            @default("")
  deviceId        String
  createdAt       DateTime          @default(now())
  SensorSettings  SensorSettings[]
  StationSettings StationSettings[]
  DeviceType      DeviceType        @relation(fields: [deviceId], references: [id])
}

model DeviceTypesAtDefaultScripts {
  id              String         @id @unique
  deviceTypeId    String
  defaultScriptId String
  DefaultScripts  DefaultScripts @relation(fields: [defaultScriptId], references: [id], onDelete: Cascade)
  DeviceType      DeviceType     @relation(fields: [deviceTypeId], references: [id], onDelete: Cascade)
}

model Houses {
  id            String          @id @unique
  name          String
  cityId        String?
  City          City?           @relation(fields: [cityId], references: [id], onDelete: Cascade)
  Rooms         Rooms[]
  UsersAtHouses UsersAtHouses[]
}

model ShellduesChainLink {
  id         String   @id @unique
  name       String
  shelldueId String
  number     Int
  action     Json
  Shelldue   Shelldue @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
}

model UsersAtHouses {
  userId   String
  housesId String
  admin    Boolean @default(false)
  Houses   Houses  @relation(fields: [housesId], references: [id], onDelete: Cascade)
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([housesId, userId])
}

model Weather {
  id            String   @id @unique @default(uuid())
  weatherData   Json
  cityId        String
  createdAtDate DateTime @default(now()) @db.Date
  City          City     @relation(fields: [cityId], references: [id])
}

model FeedbackReqorts {
  id      String @id @unique
  title   String
  message String
  userId  String
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id String @id @unique
}

enum ShelldueType {
  time
  condition
  tip
}

enum UserClient {
  bussiness
  person
  local
}

enum UserRole {
  administrator
  developer
  manager
  support
  user
}

enum UserStatus {
  active
  inactive
}

enum deviceCategory {
  State
  Action
  K_Telecom
  Value
  Teremok
  SmartBulb
  Thermostat
}
